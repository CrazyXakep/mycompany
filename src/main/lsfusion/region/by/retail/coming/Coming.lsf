MODULE Coming;

REQUIRE RetailSettings, PurchaseOrder, ItemBy, TaxBy;

NAMESPACE Retail;

CLASS Coming 'Приход в розницу' : Order;
@defineDocStatus(coming, 'прихода в розницу');
@defineNumberType(coming);
@defineID(coming, 'Приход в розницу', '', 6);

// Lines
CLASS ComingLine 'Строка заказа' : OrderLine;
coming = DATA Coming (ComingLine) NONULL  DELETE;
taxIn 'НДС входящий' = DATA Tax (ComingLine);
changeTaxIn (ComingLine cl) {
    DIALOG changeTaxBy OBJECTS t INPUT DO taxIn(cl) <- t;
}  
taxInTitle 'НДС входящий, %' (ComingLine l) = ISTRING[10](name(taxIn(l)));
taxInValue 'НДС входящий' (ComingLine cl) = NUMERIC[10,2] (price(cl) * value(taxIn(cl))/100);
sumTaxIn 'Сумма НДС входяшего' = DATA NUMERIC[10,2] (ComingLine); 
taxInPrice 'Цена с НДС входящим' (ComingLine cl) = NUMERIC[10,2] (price(cl) + taxInValue(cl));
sumConteinTaxIn 'Сумма с НДС входящим' (ComingLine cl) = NUMERIC[10,2] (untaxedAmount(cl) + sumTaxIn(cl));

markup 'Наценка, %' = DATA NUMERIC[10,2] (ComingLine);
markupValue 'Наценка' (ComingLine cl) = NUMERIC[10,2](price(cl) * markup(cl) / 100);
sumMarkup 'Сумма наценки' (ComingLine cl) = NUMERIC[10,2] (markupValue(cl) * quantity(cl));
markupPrice 'Цена с наценкой' (ComingLine cl) = NUMERIC[10,2](price(cl) + markupValue(cl));

tax 'НДС' = DATA Tax (ComingLine);  
changeTax (ComingLine cl) {
    DIALOG changeTaxBy OBJECTS t INPUT DO tax(cl) <- t;
} 
taxTitle 'НДС, %' (ComingLine l) = ISTRING[10](name(tax(l)));
taxValue 'НДС' (ComingLine cl) = NUMERIC[10,2] (markupPrice(cl) * value(tax(cl)) / 100);  
sumTax 'Сумма НДС' (ComingLine cl) = NUMERIC[10,2] (taxValue(cl) * quantity(cl));

retailPrice 'Розничная цена' = DATA NUMERIC[10,2] (ComingLine);
sumRetailPrice 'Розничная сумма' (ComingLine cl) = NUMERIC[10,2] (retailPrice(cl) * quantity(cl));

firstSumDoc 'Первая сумма' (Coming c) = GROUP SUM untaxedAmount(ComingLine cl) IF order(cl) = c;
sumTaxInDoc 'Сумма НДС входяшего' (Coming c) = GROUP SUM sumTaxIn(ComingLine cl) IF order(cl) = c;
sumMarkupDoc 'Сумма наценки' (Coming c) = GROUP SUM sumMarkup(ComingLine cl) IF order(cl) = c;
sumRetailDoc 'Розничная сумма' (Coming c) = GROUP SUM sumRetailPrice(ComingLine cl) IF order(cl) = c;

//Сумма НДС входяшего
WHEN LOCAL (CHANGED(taxIn(ComingLine cl)) OR CHANGED(untaxedAmount(cl))) 
    AND NOT CHANGED(sumTaxIn(cl)) DO sumTaxIn(cl) <- NUMERIC[10,2](taxInValue(cl) * quantity(cl));
//Розничная цена
WHEN LOCAL (CHANGED(taxValue(ComingLine cl)) OR CHANGED(price(cl))) 
    AND NOT CHANGED(retailPrice(cl)) DO retailPrice(cl) <- NUMERIC[10,2](taxValue(cl) + markupPrice(cl));

FORM coming 'Приход в розницу'
    OBJECTS c = Coming PANEL
    PROPERTIES(c) nameType, dateTime, number, 
                  nameVendor, nameCompany, nameLocation, nameCurrency
    PROPERTIES(c) READONLY firstSumDoc, sumTaxInDoc, sumMarkupDoc, sumRetailDoc
                 
    OBJECTS lineObject = ComingLine
    PROPERTIES(lineObject) index, idItem, nameItem, //description, 
        nameUom, idBarCodeItem,  
        quantity, price, untaxedAmount READONLY, 
        taxInTitle ON CHANGE changeTaxIn(lineObject), taxInValue, sumTaxIn, taxInPrice, sumConteinTaxIn,
        markup, markupValue, sumMarkup, markupPrice,
        taxTitle ON CHANGE changeTax(lineObject), taxValue, sumTax, retailPrice, sumRetailPrice
    PROPERTIES(lineObject) NEW, DELETE
    FILTERS coming(lineObject) = c
     
    EDIT Coming OBJECT c    
; 

WHEN LOCAL FORMS coming SETCHANGED(item(ComingLine cl)) DO {
    markup(cl) <- markup(item(cl));
    taxIn(cl) <- taxIn(item(cl));
    tax(cl) <- tax(item(cl)); 
    price(cl) <- firstPrice(item(cl));
}

DESIGN coming {
    caption = (CONCAT ' ', 'Приход в розницу', '№' + number(c), 'от ' + dateTime(c));
    OBJECTS {
        NEW header {
            alignment = STRETCH;    
            type = CONTAINERH;
            NEW headerLeft {
                MOVE PROPERTY(nameType(c)) { notNull = TRUE; }
                MOVE PROPERTY(dateTime(c));
                MOVE PROPERTY(number(c));
            }
            NEW headerRight {
                MOVE PROPERTY(nameVendor(c)) { notNull = TRUE; } 
                MOVE PROPERTY(nameCompany(c)) { notNull = TRUE; }
                MOVE PROPERTY(nameLocation(c)) { notNull = TRUE; }
                MOVE PROPERTY(nameCurrency(c));
            }
            NEW relatedDoc {
                fill = 1;
                type = TABBED;
            }                                            
        }
        NEW details {
            fill = 7;
            type = TABBED;
            NEW lines {
                caption = 'Строки';
                MOVE BOX(lineObject);
            }     
        }
        NEW footer {
            align = END;
            type = CONTAINERH; 
            NEW total {
                caption = 'Итого';
                type = CONTAINERH;
                MOVE PROPERTY(firstSumDoc(c));
                MOVE PROPERTY(sumTaxInDoc(c));
                MOVE PROPERTY(sumMarkupDoc(c));      
                MOVE PROPERTY(sumRetailDoc(c));                 
            }
        }
    }        
}


FORM comings 'Приходы в розницу'
    OBJECTS c = Coming BACKGROUND background(c)
    PROPERTIES(c) READONLYIF isReadonly()
                           nameType, dateTime, number, nameVendor,
                           namePaymentTerms,
                           scheduledDateTime, nameLocation,
                           nameRepresentative, vendorReference,
                           untaxedAmount, taxAmount, amount     
    PROPERTIES(c) NEWSESSION NEW, EDIT, DELETE 
;
@extendFormEditable(comings);
@defineDocObjectsForm(comings, c, 'Приходы в розницу');
@defineDocStatusForm(coming, c);
@defineDocLinesCount(coming, c);
@defineDocLocationAccess(coming, c);

NAVIGATOR {
    operations {
        NEW comings FIRST;
    }
}