MODULE Coming;

REQUIRE RetailSettings, PurchaseOrder, ItemBy, TaxBy, RetailBy;

NAMESPACE Retail;

CLASS Coming 'Приход в розницу';

type 'Тип' = DATA OrderType (Coming) NONULL;
nameType 'Тип' (Coming c) = name(type(c));

@defineDocStatus(coming, 'прихода в розницу'){
    CLASS ComingStatus 'Статус прихода в розницу' {
        draft 'Черновик'
    }
    
    name 'Имя' (ComingStatus s) = staticCaption(s) IF s IS ComingStatus CHARWIDTH 12;
    
    status 'Статус' = ABSTRACT CASE ComingStatus (Coming) MATERIALIZED INDEXED;
    nameStatus 'Статус' (Coming d) = name(status(d));
    colorStatus 'Цвет' = ABSTRACT CASE COLOR (Coming);
    
    status(Coming d) += WHEN d IS Coming THEN ComingStatus.draft;
    colorStatus(Coming d) += WHEN status(d) = ComingStatus.draft THEN RGB(187,242,210);
    
    readonly = ABSTRACT CASE BOOLEAN (Coming);
};

confirmed 'Проведён' = DATA BOOLEAN (Coming);
deleted 'Удалён' = DATA BOOLEAN (Coming);

@defineNumberType(coming){
    number 'Номер' = DATA STRING[31] (Coming) NONULL CHARWIDTH 10;

    WHEN SETCHANGED(type(Coming o)) AND numerator(type(o)) AND NOT number(o) DO {
        number(o) <- CONCAT '/', series(numerator(type(o))), curStringValue(numerator(type(o)));
        incrementValueSession(numerator(type(o)));
    }
};
@defineID(coming, 'Приход в розницу', 'ПвР', 6){
    id 'Код' = DATA STRING[50] (Coming) IN id CHARWIDTH 6 INDEXED;
    coming (STRING[50] id) = GROUP AGGR Coming o BY id(o);
    
    numeratorComing = DATA Numerator();
    nameNumeratorComing 'Нумератор - Приход в розницу' = name(numeratorComing());
    
    loadDefaultNumerators () + {
        NEW n = Numerator {
            name(n) <- 'Приход в розницу';
            series(n) <- 'ПвР';
            minValue(n) <- 1;
            maxValue(n) <- 999999;
            stringLength(n) <- 6;
            numeratorComing() <- n;
        }
    }
    
    EXTEND FORM options 
        PROPERTIES nameNumeratorComing()
    ;
    
    DESIGN options {
        commons {
            MOVE PROPERTY(nameNumeratorComing());
        }
    }
    
    WHEN SETCHANGED(Coming o IS Coming AND numeratorComing() AND NOT id(o)) DO {
        id(o) <- CONCAT '', series(numeratorComing()), curStringValue(numeratorComing());
        incrementValueSession(numeratorComing());   
    }
};

WHEN LOCAL SET(Coming c IS Coming) AND NOT CHANGED(type(c)) DO type(c) <- comingType(); 

dateTime 'Дата'  = DATA DATETIME (Coming);
WHEN LOCAL SET(Coming c IS Coming) AND NOT CHANGED(dateTime(c)) DO { dateTime(c) <- currentDateTime();}
@defineDateTimeAggregation(Coming){
    @defineDateTimeAggregation(Coming, , ){
    date 'Дата' (Coming o) = DATE(dateTime(o));
    
    @defineDateAggregation(Coming, , ){
    nameDOW 'День недели' (Coming o) = extractDOWName(date(o));
    week 'Неделя' (Coming o) = extractWeek(date(o));
    
    numberMonth '№ месяца' (Coming o) = extractMonthNumber(date(o));
    nameMonth 'Месяц' (Coming o) = extractMonthName(date(o));
    year 'Год' (Coming o) = extractYear(date(o));
};

    minute 'Минута' (Coming o) = extractMinute(dateTime(o));
    hour 'Час' (Coming o) = extractHour(dateTime(o));
};
};

numberDate 'Описание' (Coming c) = number(c) + ' от ' + dateTime(c) IN id;

vendor 'Поставщик' = DATA Partner (Coming) NONULL;
nameVendor 'Поставщик' (Coming c) = name(vendor(c));

CONSTRAINT vendor(Coming c) AND NOT isVendor(vendor(c))
    CHECKED BY vendor[Coming] MESSAGE 'Контрагент заказа поставщику должен быть поставщиком';
// company
company 'Компания' = DATA Company (Coming) NONULL;
nameCompany 'Компания' (Coming c) = name(company(c));
WHEN LOCAL SET(Coming c IS Coming) AND NOT CHANGED(company(c)) DO company(c) <- defaultCompany();

// location
location = DATA Location (Coming);
nameLocation 'Место хранения' (Coming c) = name(location(c));

// currency
currency = DATA Currency (Coming);
nameCurrency 'Валюта' (Coming c) = name(currency(c));

WHEN LOCAL SETCHANGED(type(Coming c)) AND currency(type(c)) AND NOT CHANGED(currency(c)) DO currency(c) <- currency(type(c));  


// Lines
CLASS ComingLine 'Строка заказа';
coming = DATA Coming (ComingLine) NONULL DELETE;

index '№' = PARTITION SUM 1 ORDER ComingLine cl BY coming(cl) IN id MATERIALIZED CHARWIDTH 3;

item = DATA Item (ComingLine) NONULL;
nameItem '{Item}' (ComingLine cl) = name(item(cl));
idBarCodeItem 'Штрихкод' (ComingLine cl) = idBarCode(item(cl));
idItem 'Код' (ComingLine cl) = id(item(cl));

CONSTRAINT item(ComingLine cl) AND NOT canBePurchased(item(cl)) 
    CHECKED BY item[ComingLine] MESSAGE 'Номенклатура не предназначена для закупки';

uom (ComingLine cl) = uom(item(cl));
nameUom 'Ед. изм.' (ComingLine cl) = name(uom(cl));

quantity '{Quantity}' = DATA NUMERIC[16,3] (ComingLine);
price 'Первая Цена' = DATA NUMERIC[10,2] (ComingLine);
firstSum 'Первая Сумма' (ComingLine cl) = NUMERIC[10,2](price(cl) * quantity(cl));

taxIn 'НДС входящий' = DATA Tax (ComingLine);
changeTaxIn (ComingLine cl) {
    DIALOG changeTaxBy OBJECTS t INPUT DO taxIn(cl) <- t;
}  
taxInTitle 'НДС входящий, %' (ComingLine cl) = ISTRING[10](name(taxIn(cl)));
taxInValue 'НДС входящий' (ComingLine cl) = NUMERIC[10,2] (price(cl) * value(taxIn(cl))/100);
sumTaxIn 'Сумма НДС входяшего' = DATA NUMERIC[10,2] (ComingLine); 
taxInPrice 'Цена с НДС входящим' (ComingLine cl) = NUMERIC[10,2] (price(cl) + taxInValue(cl));
sumConteinTaxIn 'Сумма с НДС входящим' (ComingLine cl) = NUMERIC[10,2] (firstSum(cl) + sumTaxIn(cl));

markup 'Наценка, %' = DATA NUMERIC[10,2] (ComingLine);
markupValue 'Наценка' (ComingLine cl) = NUMERIC[10,2](price(cl) * markup(cl) / 100);
sumMarkup 'Сумма наценки' (ComingLine cl) = NUMERIC[10,2] (markupValue(cl) * quantity(cl));
markupPrice 'Цена с наценкой' (ComingLine cl) = NUMERIC[10,2](price(cl) + markupValue(cl));

tax 'НДС' = DATA Tax (ComingLine);  
changeTax (ComingLine cl) {
    DIALOG changeTaxBy OBJECTS t INPUT DO tax(cl) <- t;
} 
taxTitle 'НДС розница, %' (ComingLine l) = ISTRING[10](name(tax(l)));
taxValue 'НДС розница' (ComingLine cl) = NUMERIC[10,2] (markupPrice(cl) * value(tax(cl)) / 100);  
sumTax 'Сумма НДС розницы' (ComingLine cl) = NUMERIC[10,2] (taxValue(cl) * quantity(cl));

retailPrice 'Розничная цена' = DATA NUMERIC[10,2] (ComingLine);
sumRetailPrice 'Розничная сумма' (ComingLine cl) = NUMERIC[10,2] (retailPrice(cl) * quantity(cl));

firstSumDoc 'Первая сумма' (Coming c) = GROUP SUM firstSum(ComingLine cl) IF coming(cl) = c;
sumTaxInDoc 'Сумма НДС входяшего' (Coming c) = GROUP SUM sumTaxIn(ComingLine cl) IF coming(cl) = c;
sumMarkupDoc 'Сумма наценки' (Coming c) = GROUP SUM sumMarkup(ComingLine cl) IF coming(cl) = c;
sumRetailDoc 'Розничная сумма' (Coming c) = GROUP SUM sumRetailPrice(ComingLine cl) IF coming(cl) = c;

//Сумма НДС входяшего
WHEN LOCAL (CHANGED(taxIn(ComingLine cl)) OR CHANGED(firstSum(cl))) 
    AND NOT CHANGED(sumTaxIn(cl)) DO sumTaxIn(cl) <- NUMERIC[10,2](taxInValue(cl) * quantity(cl));
//Розничная цена
WHEN LOCAL CHANGED(taxValue(ComingLine cl)) 
    AND NOT CHANGED(retailPrice(cl)) DO retailPrice(cl) <- NUMERIC[10,2](taxValue(cl) + markupPrice(cl));
//Образный расчет Розничной цены (изменение значение markup)
WHEN LOCAL CHANGED(retailPrice(ComingLine cl)) 
    AND NOT CHANGED(markup(cl)) DO markup(cl) <- 
        NUMERIC[10,2] ((retailPrice(cl) / (price(cl) * (1 + value(tax(cl)) / 100)) - 1) * 100);


FORM coming 'Приход в розницу'
    OBJECTS c = Coming PANEL
    PROPERTIES(c) nameType, dateTime, number, 
                  nameVendor, nameCompany, nameLocation, nameCurrency
    PROPERTIES(c) READONLY firstSumDoc, sumTaxInDoc, sumMarkupDoc, sumRetailDoc
                 
    OBJECTS lineObject = ComingLine
    PROPERTIES(lineObject) index, idItem, nameItem, 
        nameUom, idBarCodeItem,  
        quantity, price, firstSum READONLY, 
        taxInTitle ON CHANGE changeTaxIn(lineObject), taxInValue, sumTaxIn, taxInPrice, sumConteinTaxIn,
        markup, markupValue, sumMarkup, markupPrice,
        taxTitle ON CHANGE changeTax(lineObject), taxValue, sumTax, retailPrice, sumRetailPrice
    PROPERTIES(lineObject) NEW, DELETE
    FILTERS coming(lineObject) = c
     
    EDIT Coming OBJECT c    
; 

WHEN LOCAL FORMS coming SETCHANGED(item(ComingLine cl)) DO {
    markup(cl) <- markup(item(cl));
    taxIn(cl) <- taxIn(item(cl));
    tax(cl) <- tax(item(cl)); 
    price(cl) <- firstPrice(item(cl));
}

setLastDataForItem(ComingLine cl){
    markup(item(cl)) <- markup(cl);
    taxIn(item(cl)) <- taxIn(cl);
    tax(item(cl)) <- tax(cl); 
    firstPrice(item(cl)) <- price(cl);
}

DESIGN coming {
    caption = (CONCAT ' ', 'Приход в розницу', '№' + number(c), 'от ' + dateTime(c));
    OBJECTS {
        NEW header {
            alignment = STRETCH;    
            type = CONTAINERH;
            NEW headerLeft {
                MOVE PROPERTY(nameType(c)) { notNull = TRUE; }
                MOVE PROPERTY(dateTime(c));
                MOVE PROPERTY(number(c));
            }
            NEW headerRight {
                MOVE PROPERTY(nameVendor(c)) { notNull = TRUE; } 
                MOVE PROPERTY(nameCompany(c)) { notNull = TRUE; }
                MOVE PROPERTY(nameLocation(c)) { notNull = TRUE; }
                MOVE PROPERTY(nameCurrency(c));
            }
            NEW relatedDoc {
                childrenAlignment = END;
                marginLeft = 10;
                fill = 7;
            }                                            
        }
        NEW details {
            fill = 7;
            type = TABBED;
            NEW lines {
                caption = 'Строки';
                MOVE BOX(lineObject);
            }     
        }
        NEW footer {
            align = END;
            type = CONTAINERH; 
            NEW total {
                caption = 'Итого';
                type = CONTAINERH;
                MOVE PROPERTY(firstSumDoc(c));
                MOVE PROPERTY(sumTaxInDoc(c));
                MOVE PROPERTY(sumMarkupDoc(c));      
                MOVE PROPERTY(sumRetailDoc(c));                 
            }
        }
    }        
}


clone (Coming to, Coming from) {
    type(to) <- type(from);
    vendor(to) <- vendor(from);
    company(to) <- company(from);
    location(to) <- location(from);
    currency(to) <- currency(from);
    FOR coming(ComingLine cl) = from INLINE NEW ncl = ComingLine DO {
        coming(ncl) <- to;
        item(ncl) <- item(cl);
        quantity(ncl) <- quantity(cl);
        price(ncl) <- price(cl);
        taxIn(ncl) <- taxIn(cl);
        sumTaxIn(ncl) <- sumTaxIn(cl);
        markup(ncl) <- markup(cl);
        tax(ncl) <- tax(cl);
        retailPrice(ncl) <- retailPrice(cl);
    }
}

@defineDocHistory(coming, c, item, quantity){

    @defineDocHistoryHead(coming, c){
    CLASS ComingHistory 'История изменений';
    
    coming = DATA Coming (ComingHistory);

    dateTime 'Дата' = DATA DATETIME (ComingHistory);
    
    user = DATA User (ComingHistory);
    nameUser 'Пользователь' (ComingHistory l) = name(user(l));
    
    computer = DATA Computer (ComingHistory);
    hostnameComputer 'Компьютер' (ComingHistory l) = hostname(computer(l)) CHARWIDTH 10;
    
    type 'Тип' = DATA ISTRING[100] (ComingHistory) CHARWIDTH 15;
    description 'Описание' = DATA TEXT (ComingHistory);
     
    WHEN SETCHANGED(status(Coming c)) AND NOT disableHistory() DO {     
        NEW l = ComingHistory {
            coming(l) <- c;
            dateTime(l) <- currentDateTime();
            user(l) <- currentUser();
            computer(l) <- currentComputer();
            type(l) <- 'Изменен статус';
            description (l) <- 'Изменен статус на ' + staticCaption(status(c));
        }
    }

    EXTEND FORM coming
        OBJECTS comingl = ComingHistory
        PROPERTIES(comingl) READONLY dateTime, nameUser, hostnameComputer, type, description, pdescription = description PANEL
        FILTERS coming(comingl) = c
    ;
    
    DESIGN coming {
        details {
            NEW history {
                caption = 'История';
                fill = 1;
                type = SPLITH;
                MOVE BOX(comingl) { 
                    fill = 2;
                    PROPERTY(description(comingl)) { valueHeight = 18; }
                }
                MOVE PROPERTY(pdescription) { panelCaptionVertical = TRUE; fill = 1; }
            }
        }
    }
};
    
    WHEN SETCHANGED(ComingLine l IS ComingLine) AND coming(l) = Coming c 
                        AND NOT status(c) = ComingStatus.draft AND NOT disableHistory() DO {     
        NEW h = ComingHistory {
            coming(h) <- c;
            dateTime(h) <- currentDateTime();
            user(h) <- currentUser();
            computer(h) <- currentComputer();
            type(h) <- 'Добавлена строка';
            description (h) <- 'Добавлена строка с индексом ' + index(l);
        }
    }
    
    WHEN DROPPED(ComingLine l IS ComingLine) AND PREV(coming(l)) = Coming c 
                        AND NOT status(c) = ComingStatus.draft AND NOT disableHistory() DO {     
        NEW h = ComingHistory {
            coming(h) <- c;
            dateTime(h) <- currentDateTime();
            user(h) <- currentUser();
            computer(h) <- currentComputer();
            type(h) <- 'Удалена строка';
            description (h) <- 'Удалена строка с индексом ' + PREV(index(l));
        }
    }
    
    WHEN CHANGED(quantity(ComingLine l)) AND coming(l) = Coming c 
                        AND NOT status(c) = ComingStatus.draft AND NOT disableHistory() DO {     
        NEW h = ComingHistory {
            coming(h) <- c;
            dateTime(h) <- currentDateTime();
            user(h) <- currentUser();
            type(h) <- 'Изменено исходное кол-во';
            description (h) <- 'Изменено исходное кол-во продукта ' + nameItem(l) + ' на ' + quantity(l);
        }
    }
    
    WHEN CHANGED(item(ComingLine l)) AND coming(l) = Coming c 
                        AND NOT status(c) = ComingStatus.draft AND NOT disableHistory() DO {     
        NEW h = ComingHistory {
            coming(h) <- c;
            dateTime(h) <- currentDateTime();
            user(h) <- currentUser();
            computer(h) <- currentComputer();
            type(h) <- 'Изменен продукт';
            description (h) <- 'Изменен продукт в строке ' + index(l) + ' на ' + nameItem(l);
        }
    }
};

copy 'Копировать' (Coming from)  { 
    NEWSESSION {
        NEW to = Coming {
            clone(to, from);
            SHOW coming OBJECTS c = to DOCKED;
        }
    }
} IMAGE 'add.png';

background = ABSTRACT CASE COLOR (Coming);
FORM comings 'Приходы в розницу'
    OBJECTS c = Coming BACKGROUND background(c)
    PROPERTIES(c) READONLYIF isReadonly()
                           nameType, dateTime, number, nameVendor,
                           nameLocation, firstSumDoc, sumTaxInDoc, sumMarkupDoc, sumRetailDoc
    PROPERTIES(c) NEWSESSION TOOLBAR copy, NEW, EDIT
;
@extendFormEditable(comings){
    EXTEND FORM comings
        PROPERTIES() isEditable
    ;
    DESIGN comings {
        TOOLBARBOX {
            MOVE PROPERTY(isEditable()) BEFORE TOOLBARRIGHT;
        }
    }
};
@defineDocObjectsForm(comings, c, 'Приходы в розницу'){
    DESIGN comings {
        OBJECTS {
            NEW pane {
                fill = 1;
                type = CONTAINERH;
                NEW tabbedPane {
                    type = TABBED;
                    fill = 1;
                    MOVE BOX(c) { caption = 'Приходы в розницу'; }
                }
                NEW rightPane {
                    NEW filters {
                        caption = 'Фильтры';
                        alignment = STRETCH;
                        MOVE FILTERGROUPS(c) {
                            type = CONTAINERV;
                            alignment = STRETCH;
                        }
                    }
                    NEW actions {
                        alignment = STRETCH;
                        caption = 'Действия';
                    }
                    NEW statuses {
                        alignment = STRETCH;
                        caption = 'Статусы';
                    }
                }
            }
        }
    }
};
@defineDocStatusForm(coming, c){
    EXTEND FORM comings
        PROPERTIES(c) READONLY nameStatus BACKGROUND colorStatus(c) FIRST
        FILTERGROUP status
            FILTER 'Черновик' status(c) = ComingStatus.draft
    ;
    
    DESIGN comings {
        FILTERGROUP(status) { alignment = STRETCH; }
    }
    
    EXTEND FORM coming
        PROPERTIES(c) nameStatus BACKGROUND colorStatus(c)
    ;
    
    DESIGN coming {
        NEW statusPane FIRST {
            caption = 'Статусы';
            type = CONTAINERH;
            alignment = STRETCH;                          
            NEW statusActions {
                type = CONTAINERH;                    
                flex = 1; 
                NEW primaryActions {
                    type = CONTAINERH;
                }
                NEW secondaryActions {
                    type = CONTAINERH;
                }           
            }
            NEW status {
                type = CONTAINERH;
                MOVE PROPERTY(nameStatus(c));
            }
        }    
    } 
};
@defineDocLinesCount(coming, c){ 
    countComingLine 'Кол-во строк' (Coming c) = GROUP SUM 1 IF coming(ComingLine l) = c MATERIALIZED;
    
    DESIGN coming {
        lines {
            caption = (CONCAT ' ', 'Строки', '(' + countComingLine(c) + ')');
        }
    }
    EXTEND FORM comings PROPERTIES(c) READONLY countComingLine;
};
@defineDocLocationAccess(coming, c){
    @defineDocLocationAccess(coming, c, ){
    WHEN LOCAL SET(Coming o IS Coming) AND NOT CHANGED(location(o)) AND countLocation() = 1 DO
        location(o) <- firstLocation();

    CONSTRAINT SETCHANGED(location(Coming o)) AND accessDenied(location(o)) CHECKED BY location[Coming]
               MESSAGE 'У текущего пользователя нет прав доступа к выбранному месту хранения';
               
    EXTEND FORM comings
        FILTERS accessGranted(location(c)) OR NOT location(c) 
    ; 
};
};

NAVIGATOR {
    operations {
        NEW comings FIRST;
    }
}

//EXTEND FORM coming PROPERTIES copy(c);
//
//DESIGN coming {
//    secondaryActions {
//        MOVE PROPERTY(copy(c));
//    }
//}
