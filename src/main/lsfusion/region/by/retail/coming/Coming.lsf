MODULE Coming;

REQUIRE RetailSettings, PurchaseOrder, ItemBy;

NAMESPACE Retail;

CLASS Coming 'Приход в розницу' : Order;
@defineDocStatus(coming, 'прихода в розницу');
@defineNumberType(coming);
@defineID(coming, 'Приход в розницу', '', 6);

// Lines
CLASS ComingLine 'Строка заказа' : OrderLine;
coming =  DATA Coming (ComingLine) NONULL  DELETE;

taxPrice 'Цена с НДС' = DATA NUMERIC[10,2] (ComingLine);
markup 'Наценка, %' = DATA NUMERIC[10,2] (ComingLine);
retailPrice 'Розничная цена' = DATA NUMERIC[10,2] (ComingLine);

sumConteinTax 'Сумма с НДС' = DATA NUMERIC[10,2] (ComingLine);
sumMarkup 'Сумма наценки' = DATA NUMERIC[10,2] (ComingLine);
sumRetailPrice 'Розничная сумма' = DATA NUMERIC[10,2] (ComingLine);

WHEN LOCAL FORMS order SETCHANGED(item(ComingLine cl)) DO {
    markup(cl) <- markup(item(cl));
}
//Цена с НДС
WHEN LOCAL (CHANGED(taxes(ComingLine cl)) OR CHANGED(price(cl))) 
    AND NOT CHANGED(taxPrice(cl)) DO taxPrice(d) <- NUMERIC[10,2](price(cl) + price(cl) * taxPercent(cl)/100);
//Розничная цена
WHEN LOCAL (CHANGED(markup(ComingLine cl)) OR CHANGED(taxPrice(cl))) 
    AND NOT CHANGED(retailPrice(cl)) DO retailPrice(d) <- NUMERIC[10,2](taxPrice(cl) + taxPrice(cl) * markup(cl)/100);
//Сумма с НДС
WHEN LOCAL (CHANGED(taxAmount(ComingLine cl)) OR CHANGED(untaxedAmount(cl))) 
    AND NOT CHANGED(sumConteinTax(cl)) DO sumConteinTax(d) <- NUMERIC[10,2](taxPrice(cl) * quantity(cl));
//Сумма наценки
WHEN LOCAL (CHANGED(markup(ComingLine cl)) OR CHANGED(untaxedAmount(cl))) 
    AND NOT CHANGED(sumMarkup(cl)) DO sumMarkup(d) <- NUMERIC[10,2](taxPrice(cl) * markup(cl)/100 * quantity(cl));
//Розничная сумма
WHEN LOCAL (CHANGED(sumMarkup(ComingLine cl)) OR CHANGED(sumConteinTax(cl))) 
    AND NOT CHANGED(sumRetailPrice(cl)) DO sumRetailPrice(d) <- NUMERIC[10,2](retailPrice(cl) * quantity(cl));

FORM coming 'Приход в розницу'
    OBJECTS c = Coming PANEL
    PROPERTIES(c) nameType, dateTime, number, 
                  nameVendor, nameCompany, nameLocation, nameCurrency
    PROPERTIES(c) READONLY untaxedAmount, taxAmount, amount
                 
    OBJECTS lineObject = ComingLine
    PROPERTIES(lineObject) index, nameItem, //description, 
        nameUom, idBarCodeItem, idItem, 
        quantity, price, taxes ON CHANGE changeTax(lineObject), taxPrice, markup, retailPrice,
        untaxedAmount READONLY, taxAmount, sumConteinTax, sumMarkup, sumRetailPrice
    PROPERTIES(lineObject) NEW, DELETE
    FILTERS order(lineObject) = c
     
    EDIT Coming OBJECT c    
; 

DESIGN coming {
    caption = (CONCAT ' ', 'Приход в розницу', '№' + number(c), 'от ' + dateTime(c));
    OBJECTS {
        NEW header {
            alignment = STRETCH;    
            type = CONTAINERH;
            NEW headerLeft {
                MOVE PROPERTY(nameType(c)) { notNull = TRUE; }
                MOVE PROPERTY(dateTime(c));
                MOVE PROPERTY(number(c));
            }
            NEW headerRight {
                MOVE PROPERTY(nameVendor(c)) { notNull = TRUE; } 
                MOVE PROPERTY(nameCompany(c)) { notNull = TRUE; }
                MOVE PROPERTY(nameLocation(c)) { notNull = TRUE; }
                MOVE PROPERTY(nameCurrency(c));
            }
            NEW relatedDoc {
                fill = 1;
                type = TABBED;
            }                                            
        }
        NEW details {
            fill = 7;
            type = TABBED;
            NEW lines {
                caption = 'Строки';
                MOVE BOX(lineObject);
            }     
        }
        NEW footer {
            align = END;
            type = CONTAINERH; 
            NEW total {
                caption = 'Итого';
                type = CONTAINERH;
                MOVE PROPERTY(untaxedAmount(c));
                MOVE PROPERTY(taxAmount(c));
                MOVE PROPERTY(amount(c));                     
            }
        }
    }        
}


FORM comings 'Приходы в розницу'
    OBJECTS c = Coming BACKGROUND background(c)
    PROPERTIES(c) READONLYIF isReadonly()
                           nameType, dateTime, number, nameVendor,
                           namePaymentTerms,
                           scheduledDateTime, nameLocation,
                           nameRepresentative, vendorReference,
                           untaxedAmount, taxAmount, amount     
    PROPERTIES(c) NEWSESSION NEW, EDIT, DELETE 
;
@extendFormEditable(comings);
@defineDocObjectsForm(comings, c, 'Приходы в розницу');
@defineDocStatusForm(coming, c);
@defineDocLinesCount(coming, c);
@defineDocLocationAccess(coming, c);

NAVIGATOR {
    operations {
        NEW comings FIRST;
    }
}