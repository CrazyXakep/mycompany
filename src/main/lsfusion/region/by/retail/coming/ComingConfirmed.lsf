MODULE ComingConfirmed;

REQUIRE Coming, ComingSelection, Receipt, ReceiptDone, ReceiptPutAway, ReceiptCost;

NAMESPACE Retail;

EXTEND CLASS ComingStatus {
    confirmed 'Проведён'
}

status(Coming o) += WHEN confirmed(o) THEN ComingStatus.confirmed;
colorStatus(Coming o) += WHEN status(o) = ComingStatus.confirmed THEN RGB(150,255,150);

receipt 'Приёмка' = DATA Receipt (Coming);
nameReceipt 'Приёмка' (Coming c) = STRING[50] (numberDate(receipt(c)));

//revalue 'Переоценка' = DATA Revalue (Coming);
//nameRevalue 'Переоценка' (Coming c) = STRING[50] (numberDate(revalue(c)));

confirmCore 'Провести' (Coming c){
            NEW newRec = Receipt {
                type(newRec) <- receiptType();
                vendor(newRec) <- vendor(c);
                location(newRec) <- location(c);
                scheduledDateTime(newRec) <- dateTime(c);
                FOR coming(ComingLine cl) = c NEW rl = ReceiptLine DO {            
                    receipt(rl) <- newRec;
                    product(rl) <- item(cl);
                    initialDemand(rl) <- quantity(cl);
                    done(rl) <- quantity(cl);
                    dataCost(rl) <- sumRetailPrice(cl);
                    setLastDataForItem(cl);
                }
                ready(newRec) <- TRUE;
                receipt(c) <- newRec;
            }
            validate(receipt(c));
            executionDateTime(receipt(c)) <- dateTime(c);
            IF(putAway(type(receipt(c)))) THEN 
                ASK 'Приступить к размещению товара?' DO 
                    NEWSESSION SHOW receipt OBJECTS r = receipt(c) DOCKED;
            
            // Создание и заполенние переоценки 
            
            confirmed(c) <- TRUE;  
}

confirm 'Провести' (Coming c){
    APPLY; 
    IF canceled() THEN RETURN;
    
    IF(status(c) == ComingStatus.draft) THEN 
        NEWSESSION {
            confirmCore(c);      
            APPLY;
        }
}

confirmOff 'Отменить проведение' (Coming c){
    APPLY; 
        IF canceled() THEN RETURN;
    
    IF(status(c) == ComingStatus.confirmed ) THEN     
        NEWSESSION {
          DELETE receipt(c);
          confirmed(c) <- NULL;
          APPLY;
        }
}
WHEN CHANGED(quantity(ComingLine l)) AND coming(l) = Coming c AND status(c) = ComingStatus.confirmed DO {     
       DELETE receipt(c);
       confirmed(c) <- NULL;
       confirmCore(c);
}


EXTEND FORM coming 
     PROPERTIES(c)  confirmDraft = confirm SHOWIF status(c) = ComingStatus.draft,
                    confirmOff SHOWIF status(c) = ComingStatus.confirmed,
                    nameReceipt SHOWIF status(c) = ComingStatus.confirmed READONLY
                    //,namePricelist SHOWIF status(c) = ComingStatus.confirmed READONLY
;

DESIGN coming {
    primaryActions {
        MOVE PROPERTY(confirmDraft) { fontStyle = 'bold'; }
        MOVE PROPERTY(confirmOff(c));
    }
    relatedDoc{
        caption = CONCAT ' ', 'Cвязанные документы';
        MOVE PROPERTY(nameReceipt(c));
    }
}

EXTEND FORM comings    
    EXTEND FILTERGROUP status
        FILTER 'Проведён' status(c) = ComingStatus.confirmed    
;

@defineSelectionAction(comings, Coming, confirm, 'Провести', statuses);
@defineSelectionAction(comings, Coming, confirmOff, 'Отменить проведение', statuses);

delete 'Удалить из базы' (Coming c){
    DELETE c;
    APPLY;
}
@defineSelectionAction(comings, Coming, delete, 'Уничтожить', actions);